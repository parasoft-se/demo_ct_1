
# This is a basic workflow to help you get started with the Run C/C++test action for a CMake-based project.
name: C/C++test CT with CMake - Code Coverage

on:
  # Triggers the workflow on push or pull request events but only for the master (main) branch.
  push:
    branches: [ master, main ]
  pull_request:
    branches: [ master, main ]

  # Allows you to run this workflow manually from the Actions tab.
  workflow_dispatch:

env:
  LINE_COV_GATE: 70
  MCDC_COV_GATE: 30

permissions:
  contents: read
  pages: write
  id-token: write
  security-events: write
  # only required for workflows in private repositories
  actions: read
  
# A workflow run is made up of one or more jobs that can run sequentially or in parallel.
jobs:
  run-cpptestct-cmake:
    name: Analyze project with C/C++test CT

    # Specifies the type of runner that the job will run on.
    runs-on: self-hosted

    # Steps represent a sequence of tasks that will be executed as part of the job.
    steps:

      # Checks out your repository under $GITHUB_WORKSPACE, so that your job can access it.
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set build id
        shell: bash
        working-directory: ${{github.workspace}}
        run: echo "build_id=build-$(date +'%Y-%m-%d-%H-%M')" >> $GITHUB_ENV 
      
      - name: Configure Project
        run: cmake -DCPPTEST_COVERAGE=ON -DCPPTEST_HOME=/opt/parasoft/cpptest-ct -S . -B .build

      # Builds your CMake project. (This step is optional, as it is not required for code analysis).
      - name: Build Project
        run: |
          cmake --build .build
          cd .build
          rm -rf cpptest-coverage/CovGoogleTest/CovGoogleTest.clog

      - name: Run Unit Tests
        run: |
          cd .build
          ctest          

      # Builds your CMake project. (This step is optional, as it is not required for code analysis).
      - name: Compute Coverage
        run: |
          cd .build
          cpptestcov compute -map cpptest-coverage/CovGoogleTest/.cpptest -clog cpptest-coverage/CovGoogleTest/CovGoogleTest.clog -out .coverage

      - name: Report Coverage to Console
        run: |
          cd .build
          cpptestcov report text .coverage

      - name: Compute Index for VS Code
        run: |
          cd .build
          cpptestcov index .coverage

      - name: Generate Coverage Reports
        working-directory: ${{github.workspace}}/.build
        shell: bash
        # Execute the build.  You can specify a specific target with "--target <NAME>"
        run:  cpptestcov report html .coverage -out .coverage/coverage.html
        
      - name: Setup Pages
        uses: actions/configure-pages@v3
      
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v2
        with:
          # Upload coverage reports
          path: ${{github.workspace}}/.build/.coverage
        
      - name: Archive reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: CpptestCTReports
          path: |
            .build/.coverage/*.*

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v2

      - name: Show Coverage HTML Link
        shell: bash
        run: echo "Check html report https://parasoft-se.github.io/demo_ct_1/coverage.html"
        
      - name: Line Coverage Quality Gate
        working-directory: ${{github.workspace}}/.build
        shell: bash
        # Query for project's coverage and compare with the gate requirements
        run: NUMBER=$(cpptestcov query -coverage LC .coverage) && if [ $NUMBER -lt $LINE_COV_GATE ]; then echo "LINE coverage quality gate failed"; echo "Expected result $LINE_COV_GATE%, echieved $NUMBER%"; false; else echo "LINE coverage quality gate passed with $NUMBER% (required $LINE_COV_GATE%)"; true; fi  
        
      - name: MCDC Coverage Quality Gate
        working-directory: ${{github.workspace}}/.build
        shell: bash
        # Query for project's coverage and compare with the gate requirements
        run: NUMBER=$(cpptestcov query -coverage MCDC .coverage) && if [ $NUMBER -lt $MCDC_COV_GATE ]; then echo "MCDC coverage quality gate failed"; echo "Expected result $MCDC_COV_GATE%, echieved $NUMBER%"; false; else echo "MCDC coverage quality gate passed with $NUMBER% (required $MCDC_COV_GATE%)"; true; fi  

      
        
